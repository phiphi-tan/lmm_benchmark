import ast

results = {
    "Qwen/Qwen2.5-VL-7B-Instruct":  ['[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '1.0, 1.0, 1.0, 1.0, 1.0, 1.0', '[0.8, 0.7, 0.6, 0.7, 0.9, 0.8]', '0.8, 0.9, 0.8, 0.7, 0.6, 0.9', '0.8, 0.9, 0.7, 0.8, 0.6, 0.7', '0.8, 0.7, 0.9, 0.9, 0.8, 0.9', '[0.8, 0.8, 0.6, 1.0, 0.9, 0.9]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '0.8, 0.9, 0.2, 0.6, 0.8, 0.7', '[0.8, 0.8, 0.7, 0.6, 0.9, 0.9]', '0.8, 0.9, 0.9, 0.7, 0.9, 0.9', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '1.0, 1.0, 1.0, 1.0, 1.0, 1.0', '[0.8, 0.7, 0.8, 0.6, 0.9, 0.9]', '[0.8, 0.9, 0.7, 0.8, 1.0, 1.0]', '1.0, 1.0, 1.0, 1.0, 0.8, 1.0', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 0.8, 1.0, 0.9]', '0.8, 0.8, 0.9, 0.9, 0.7, 0.9', '[1.0, 1.0, 0.8, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '0.8, 0.8, 0.8, 0.8, 0.9, 0.9', '0.8, 0.8, 0.8, 0.8, 1.0, 1.0', '0.8, 0.7, 0.6, 0.9, 0.85, 0.85', '0.8, 0.9, 0.7, 0.6, 0.9, 0.8', '[0.8, 0.7, 0.8, 0.9, 0.9, 0.8]', '[1.0, 1.0, 0.8, 0.9, 1.0, 0.9]', '0.8, 0.9, 0.7, 0.6, 0.8, 1.0', '[1.0, 0.8, 0.8, 1.0, 1.0, 1.0]', '0.8, 0.9, 0.9, 0.9, 1.0, 0.8', '[1.0, 1.0, 0.8, 1.0, 1.0, 1.0]', '[0.8, 0.8, 0.7, 0.6, 0.9, 0.9]', '1.0, 1.0, 1.0, 1.0, 1.0, 1.0', '0.8, 0.7, 0.6, 0.9, 0.9, 0.5', '0.8, 0.9, 0.7, 0.8, 0.9, 0.6', '[0.8, 1.0, 0.8, 0.9, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '0.8, 0.7, 0.9, 0.9, 0.9, 0.9', '1.0, 1.0, 0.8, 1.0, 1.0, 1.0', '[0.8, 0.9, 0.9, 0.9, 1.0, 0.7]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.8, 0.7, 0.9, 0.9, 0.8, 0.8]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '0.8, 0.7, 0.6, 0.9, 1.0, 0.9', '[0.8, 0.7, 0.6, 0.9, 0.85, 0.9]', '[0.8, 0.8, 0.7, 0.9, 0.9, 0.6]', '0.8, 0.9, 0.7, 0.9, 0.9, 0.9', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.8, 1.0, 0.6, 0.9, 1.0, 1.0]', '0.8, 0.9, 0.7, 0.9, 1.0, 0.9', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.8, 0.7, 0.7, 0.9, 0.9, 0.8]', '[1.0, 1.0, 1.0, 0.8, 1.0, 0.9]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.8, 1.0, 0.7, 0.9, 0.8, 0.8]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '0.8, 0.7, 0.6, 0.9, 0.9, 0.8', '[1.0, 0.8, 0.6, 1.0, 0.9, 0.8]', '[0.8, 0.8, 0.7, 1.0, 0.9, 0.9]', '[1.0, 0.8, 0.6, 1.0, 1.0, 0.9]', '0.8, 0.9, 0.9, 0.9, 0.8, 0.9'],
    "Qwen/Qwen2.5-Omni-7B":['[0.9, 0.9, 0.9, 0.9, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[1.0, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.85, 1.0, 0.85, 0.85, 0.75, 0.85]', '[0.8, 0.8, 0.6, 0.8, 0.7, 0.7]', '[0.8, 0.6, 0.8, 0.9, 0.9, 0.8]', '[0.8, 0.8, 0.0, 0.8, 0.8, 0.8]', '[0.8, 1.0, 0.8, 0.8, 1.0, 0.8]', '[0.85, 1.0, 0.0, 0.0, 0.85, 1.0]', '[0.9, 0.9, 0.8, 0.9, 0.9, 0.9]', '[0.95, 1.0, 1.0, 0.95, 1.0, 1.0]', '[0.9, 0.9, 0.8, 0.9, 0.9, 0.9]', '[0.8, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.85, 0.85, 0.85, 0.7, 0.85, 0.85]', '[0.9, 0.9, 0.9, 0.9, 1.0, 1.0]', '[0.8, 1.0, 0.8, 0.8, 0.0, 0.8]', '[0.9, 0.9, 0.8, 0.9, 0.9, 0.9]', '[0.85, 0.85, 0.85, 0.0, 0.85, 0.85]', '[0.9, 0.9, 0.9, 0.9, 0.8, 0.8]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.9, 0.9, 0.8, 0.8, 0.9, 0.9]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.85, 0.85, 0.85, 0.85, 0.95, 0.95]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '0.75, 0.85, 0.85, 0.85, 0.85, 0.85', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.9, 0.9, 0.8, 0.8, 0.8, 0.9]', '0.85, 0.85, 0.85, 0.85, 0.85, 1.0', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.8, 1.0, 0.9, 0.9, 0.9, 0.9]', '[0.8, 1.0, 0.8, 1.0, 1.0, 1.0]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.9, 1.0, 0.8, 0.9, 0.9, 0.8]', '[0.85, 0.85, 0.85, 0.95, 0.95, 0.95]', '[0.85, 0.85, 0.7, 0.85, 0.85, 0.85]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.8, 0.5, 0.8, 0.9, 0.8, 0.8]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.9, 0.9, 0.8, 0.9, 0.9, 0.9]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.9, 1.0, 1.0, 1.0, 1.0, 1.0]', '[0.9, 0.9, 0.8, 0.8, 0.9, 0.8]', '[0.9, 0.9, 0.9, 1.0, 1.0, 0.9]', '[0.9, 0.9, 0.9, 0.9, 1.0, 1.0]', '[0.6, 0.6, 0.6, 0.8, 0.8, 0.8]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.85, 0.85, 0.85, 0.85, 0.85, 0.85]', '[0.8, 0.8, 0.6, 0.8, 0.8, 0.8]', '[0.9, 0.8, 0.8, 0.9, 0.9, 0.9]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.85, 0.85, 0.85, 0.85, 0.85, 0.85]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.8, 0.8, 0.8, 0.8, 0.8, 0.8]', '[0.9, 1.0, 0.9, 0.8, 0.9, 0.9]', '[0.85, 1.0, 0.85, 0.85, 0.95, 0.95]', '0.83\n', '[0.85, 0.85, 0.85, 0.85, 0.85, 0.85]', '[0.85, 0.85, 0.85, 0.85, 0.85, 0.85]', '[0.9, 0.8, 0.5, 0.9, 0.8, 0.8]', '0.83\n', '[0.9, 0.8, 0.0, 0.9, 1.0, 0.9]', '[0.8, 1.0, 1.0, 1.0, 0.0, 1.0]'],
    "google/gemma-3-4b-it":['0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.9, 0.9, 0.8, 0.9, 0.9]', '[1.0, 1.0, 1.0, 0.9, 0.9, 0.8]', '[0.9, 0.85, 0.8, 0.85, 0.95, 0.75]', '[0.9, 0.95, 0.85, 0.7, 0.8, 0.9]', '[0.6, 0.8, 0.4, 0.9, 0.7, 0.8]', '[0.9, 0.85, 0.8, 0.75, 0.7, 0.65]', '0.8, 0.9, 0.7, 0.95, 0.85, 0.92', '[0.9, 0.95, 0.8, 0.85, 0.9, 0.95]', '[0.9, 0.95, 0.6, 0.7, 0.9, 0.95]', '0.8, 0.9, 0.7, 0.95, 0.92, 0.9', '[0.9, 0.85, 0.95, 0.7, 0.9, 0.88]', '[0.9, 0.95, 0.85, 0.75, 0.9, 0.95]', '[0.9, 0.95, 0.9, 0.9, 0.95, 0.98]', '0.8, 0.7, 0.6, 0.5, 0.4, 0.3', '[0.9, 0.95, 0.85, 0.9, 0.95, 0.98]', '[0.9, 0.85, 0.8, 0.75, 0.1, 0.6]', '[0.9, 0.9, 0.8, 0.85, 0.9, 0.9]', '[0.9, 0.85, 0.7, 0.65, 0.8, 0.95]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.95, 0.9, 0.9, 0.9, 0.9]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.95, 0.9, 0.9, 0.95, 1.0]', '0.7, 0.8, 0.9, 0.6, 0.85, 0.95', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.9, 0.7, 0.8, 0.6, 0.9]', '[0.9, 0.85, 0.7, 0.8, 0.9, 0.95]', '[0.9, 0.9, 0.9, 0.9, 0.9, 0.9]', '[0.9, 0.9, 0.9, 0.95, 0.9, 0.9]', '[0.9, 0.95, 0.85, 0.98, 0.97, 0.99]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '0.7, 0.8, 0.6, 0.9, 0.85, 0.75', '0.7, 0.8, 0.9, 0.95, 0.98, 0.99', '0.9, 0.85, 0.75, 0.65, 0.6, 0.5', '0.7, 0.8, 0.6, 0.9, 0.85, 0.92', '[0.9, 0.85, 0.8, 0.95, 0.9, 0.85]', '0.7, 0.8, 0.9, 0.6, 0.95, 0.98', '[0.9, 0.95, 0.85, 0.9, 0.95, 1.0]', '0.7, 0.8, 0.9, 0.95, 0.98, 1.0', '[0.9, 0.95, 0.95, 0.9, 0.95, 1.0]', '[0.9, 0.85, 0.8, 0.75, 0.8, 0.7]', '[0.9, 0.85, 0.95, 1.0, 0.95, 0.9]', '[0.9, 0.95, 0.7, 0.85, 0.92, 0.98]', '[0.9, 0.85, 0.75, 0.6, 0.8, 0.95]', '[0.9, 0.85, 0.8, 0.75, 0.7, 0.65]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.95, 0.7, 0.85, 0.9, 0.95]', '[0.9, 0.85, 0.8, 0.75, 0.65, 0.7]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.85, 0.8, 0.85, 0.95, 0.9]', '[0.9, 0.85, 0.8, 0.75, 0.7, 0.65]', '[0.9, 0.9, 0.9, 0.8, 0.8, 0.8]', '[0.9, 0.95, 0.85, 0.7, 0.9, 0.95]', '[0.7, 0.85, 0.75, 0.8, 0.9, 0.95]', '0.8, 0.9, 0.7, 0.6, 0.8, 0.7', '0.7, 0.8, 0.6, 0.9, 0.85, 0.75', '[0.8, 0.7, 0.6, 0.9, 0.95, 0.85]', '[0.9, 0.95, 0.8, 0.9, 0.95, 0.9]', '0.9, 0.85, 0.8, 0.75, 0.7, 0.65', '[0.9, 0.85, 0.7, 0.8, 0.95, 0.9]', '[0.9, 0.95, 0.95, 0.9, 0.95, 1.0]'],
}

model_results = [[] for _ in range(6)]
print(model_results)

def is_valid(pred):
    if not (isinstance(pred, list) or isinstance(pred, tuple)): return False
    if len(pred) != 6: return False
    for p in pred:
        if not (isinstance(p, float) or isinstance(p, int)): return False
    return True

def average(lst):
    if len(lst) == 0:
        return 0
    
    return sum(lst) / len(lst)

for model, result in results.items():
    print("Evaluating for {}".format(model))
    new_pred = []

    for p in result:
        try:
            new_pred.append(ast.literal_eval(p))   
        except:
            new_pred.append(p)

    for i in range(len(new_pred)):
        pred_list = new_pred[i]
        print('{} Prediction list is: {}'.format(i, pred_list))
        if not is_valid(pred_list):
            for i in range(6):
                model_results[i].append(0)
            continue
                
        for i in range(len(pred_list)):
            model_results[i].append(pred_list[i])

    for i in range(len(model_results)):
        result = model_results[i]
        ave_result = average(result)
        
        print('{} result: {}'.format(i, result))
        print('{} average: {}'.format(i, ave_result))